{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KIDOUK/Machine-Learning-Simplified/blob/main/vaishnavi%20sangewar\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!git clone https://github.com/IEEE-CISCodeCraft/Machine-Learning-Simplified.git"
      ],
      "metadata": {
        "id": "_fJLfdEpHP9d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5eb087c4-b11e-4906-fe34-2e6bea8a7998"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'Machine-Learning-Simplified'...\n",
            "remote: Enumerating objects: 31, done.\u001b[K\n",
            "remote: Counting objects: 100% (16/16), done.\u001b[K\n",
            "remote: Compressing objects: 100% (12/12), done.\u001b[K\n",
            "remote: Total 31 (delta 1), reused 16 (delta 1), pack-reused 15\u001b[K\n",
            "Receiving objects: 100% (31/31), 377.63 KiB | 31.47 MiB/s, done.\n",
            "Resolving deltas: 100% (4/4), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Replace the <code>None</code> instances pesent in the code."
      ],
      "metadata": {
        "id": "91bMnvq8oqbp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!cp \"/content/Machine-Learning-Simplified/Day-1/LRTestCases.py\" \"/content/\""
      ],
      "metadata": {
        "id": "6DNQ2HHJHjYZ"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from LRTestcases import*"
      ],
      "metadata": {
        "id": "dG5rIH8KHUOT",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 314
        },
        "outputId": "860df3c5-4bde-4f2d-ab90-6d941ec2936c"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-4882213b8610>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mLRTestcases\u001b[0m \u001b[0;32mimport\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'LRTestcases'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "1tOdDoSwZeIE"
      },
      "outputs": [],
      "source": [
        "def error(yhat, y):\n",
        "    error = yhat-y    #Subtract y from yhat\n",
        "    return error"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST YOUR IMPLEMENTATION\n",
        "(error)"
      ],
      "metadata": {
        "id": "D7yM32C_Xz-g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a6dccfc6-bf3e-4fe2-84c8-29ebc3703b11"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.error(yhat, y)>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def error_square(error):\n",
        "    square = error**2       #Square the error claculated above\n",
        "    return square"
      ],
      "metadata": {
        "id": "Nnoygph2er5y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST YOUR IMPLEMENTATION\n",
        "(error_square)"
      ],
      "metadata": {
        "id": "MHGCiEXJX_AR",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c02cfb7f-feca-400f-8237-4ee532da63e9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.error_square(error)>"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def total_squared_error(error, num):\n",
        "    total_squared_error = 0\n",
        "    for i in range(num):\n",
        "      total_squared_error = error + total_squared_error      #Add the \"error\" to the \"total_sqared_error\"\n",
        "    return total_squared_error"
      ],
      "metadata": {
        "id": "wgwOEQK9fMqA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST YOUR IMPLEMENTATION\n",
        "(total_squared_error)"
      ],
      "metadata": {
        "id": "ilzjasT4YJAh",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "50548918-516b-4f72-b8c1-7df0823235a6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.total_squared_error(error, num)>"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "$\\text{Mean Squared Error}=\\frac{1}{2*m}\\sum\\limits_{i = 0}^{m-1}(y-ŷ)^2$"
      ],
      "metadata": {
        "id": "oS7bM8mBjJ-u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def mse(total_squared_error, num):\n",
        "    denominator = num*2          #Multipy num with 2\n",
        "    mse = total_squared_error/denominator  #Divide \"total_sqaured_error\" by \"denominator\"\n",
        "    return num"
      ],
      "metadata": {
        "id": "Q6sFN7i2piR8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST YOUR IMPLEMENTATION\n",
        "(mse)"
      ],
      "metadata": {
        "id": "fZ816KtRYsoj",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2913679c-80c6-433f-f1f2-c28bd97f018e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.mse(total_squared_error, num)>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Finding the predicted value**"
      ],
      "metadata": {
        "id": "3Uqj2E0BlU_U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def predicted_value(w, x, b):\n",
        "    yhat = w*x+b   #Multiply 'w' with 'x' and add 'b'\n",
        "    return yhat"
      ],
      "metadata": {
        "id": "oiwBU-fSjp5C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#TEST YOUR IMPLEMENTATION\n",
        "(predicted_value)"
      ],
      "metadata": {
        "id": "MXs2kadnreTF",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a6b68316-080c-4f1a-b44d-2b82aa7698ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.predicted_value(w, x, b)>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Cost Function\n",
        "The equation for cost with one variable is:\n",
        "$$J(w,b) = \\frac{1}{2m} \\sum\\limits_{i = 0}^{m-1} (ŷ - y^{(i)})^2$$"
      ],
      "metadata": {
        "id": "qW9qAdiUwOrk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def compute_cost(x, y, w, b):\n",
        "    # number of training examples\n",
        "    m = x.shape[0]\n",
        "    total_squared_error = 0\n",
        "    for i in range(m):\n",
        "        yhat = w * x[i] + b\n",
        "        error =yhat- y[i]         #Subtract \"y[i]\" from \"yhat\"\n",
        "        squared_error = error^2   #Square the error\n",
        "        total_squared_error = total_squared_error+error #Add the \"error\" to the \"total_sqared_error\"\n",
        "    denominator = m*2   #Multiply m by 2\n",
        "    total_cost = total_squared_error/denominator     #Divide total_cost by denominator\n",
        "    return total_cost"
      ],
      "metadata": {
        "id": "RCCqRXf-wNoI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Gradient Descent\n",
        "## 1. Compute Gradient\n",
        "The gradient is defined as:\n",
        "$$\n",
        "\\begin{align}\n",
        "\\frac{\\partial J(w,b)}{\\partial w}  &= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (ŷ - y^{(i)})x^{(i)} \\\\\n",
        "  \\frac{\\partial J(w,b)}{\\partial b}  &= \\frac{1}{m} \\sum\\limits_{i = 0}^{m-1} (ŷ - y^{(i)}) \\\\\n",
        "\\end{align}\n",
        "$$"
      ],
      "metadata": {
        "id": "OGswOCVFzR7W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def compute_gradient(x, y, w, b):\n",
        "    # Number of training examples\n",
        "    m = x.shape[0]\n",
        "    dj_dw = 0\n",
        "    dj_db = 0\n",
        "\n",
        "    for i in range(m):\n",
        "        yhat = w * x[i] + b\n",
        "        dj_dw_i = (yhat - y[i]) * x[i]\n",
        "        dj_db_i = yhat - y[i]\n",
        "        dj_db += dj_db_i\n",
        "        dj_dw += dj_dw_i\n",
        "    dj_dw = dj_dw / m\n",
        "    dj_db = dj_db / m\n",
        "\n",
        "    return dj_dw, dj_db"
      ],
      "metadata": {
        "id": "VMBk0PnA0wK3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(compute_gradient)"
      ],
      "metadata": {
        "id": "3U-qZNSFE1QK",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4887d200-ff0f-45bd-ab87-29cf5ccafed7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function __main__.compute_gradient(x, y, w, b)>"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Update the parameters <code>num_iterations</code> times\n",
        "$$\\begin{align*} \\text{repeat}&\\text{ until convergence:} \\; \\lbrace \\newline\n",
        "\\;  w &= w -  \\alpha \\frac{\\partial J(w,b)}{\\partial w}  \\; \\newline\n",
        " b &= b -  \\alpha \\frac{\\partial J(w,b)}{\\partial b}  \\newline \\rbrace\n",
        "\\end{align*}$$\n",
        "where, parameters $w$, $b$ are updated simultaneously."
      ],
      "metadata": {
        "id": "AhWGXBq82p6P"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def gradient_descent(x, y, learning_rate, num_iterations):\n",
        "    # Initialize weights and bias\n",
        "    w = 0\n",
        "    b = 0\n",
        "    # Number of training examples\n",
        "    m = x.shape[0]\n",
        "    for _ in range(num_iterations):\n",
        "        # Compute gradients using the compute_gradient function\n",
        "        dj_dw, dj_db = compute_gradient(x, y, w, b)\n",
        "\n",
        "        # Update weights and bias\n",
        "        w = w - learning_rate * dj_dw\n",
        "        b = b - learning_rate * dj_db\n",
        "        # Compute the cost for monitoring\n",
        "        cost = compute_cost(x, y, w, b)\n",
        "        print(f'Iteration {_+1}/{num_iterations}, Cost: {cost:.6f}')\n",
        "    return w, b"
      ],
      "metadata": {
        "id": "OlNwBvu52cUv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "(gradient_descent, compute_cost, compute_gradient)"
      ],
      "metadata": {
        "id": "dpmvXbs4lmHO",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f720f290-77e0-494b-96b3-00646e567043"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(<function __main__.gradient_descent(x, y, learning_rate, num_iterations)>,\n",
              " <function __main__.compute_cost(x, y, w, b)>,\n",
              " <function __main__.compute_gradient(x, y, w, b)>)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NknHm9DGGonf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Project:** Melanoma Tumor Size Prediction"
      ],
      "metadata": {
        "id": "_Vb4kNxkG_Ml"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
        "from sklearn.model_selection import train_test_split\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "ibTpczTtGokE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Read the dataset\n",
        "data=pd.read_csv('/content/Machine-Learning-Simplified/Day-1/melanoma_dataset.csv')"
      ],
      "metadata": {
        "id": "eqAMMJ9lGohp"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Display the dataset\n",
        "data"
      ],
      "metadata": {
        "id": "Q14KncK6GofO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "ed20d1dd-3ae1-484f-867b-d7295702892a"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     mass_npea  tumor_size\n",
              "0    18.159306    7.490802\n",
              "1    39.693228   19.014286\n",
              "2    32.659956   14.639879\n",
              "3    27.556925   11.973170\n",
              "4     9.800536    3.120373\n",
              "..         ...         ...\n",
              "995   5.343260    1.831641\n",
              "996  39.080774   18.346272\n",
              "997   8.435708    2.736373\n",
              "998  40.580192   19.004747\n",
              "999  20.147810    8.920115\n",
              "\n",
              "[1000 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-c421a679-8bb6-49cb-a1b1-1a1d6331d783\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mass_npea</th>\n",
              "      <th>tumor_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>18.159306</td>\n",
              "      <td>7.490802</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>39.693228</td>\n",
              "      <td>19.014286</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>32.659956</td>\n",
              "      <td>14.639879</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>27.556925</td>\n",
              "      <td>11.973170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>9.800536</td>\n",
              "      <td>3.120373</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>995</th>\n",
              "      <td>5.343260</td>\n",
              "      <td>1.831641</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>996</th>\n",
              "      <td>39.080774</td>\n",
              "      <td>18.346272</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>997</th>\n",
              "      <td>8.435708</td>\n",
              "      <td>2.736373</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>998</th>\n",
              "      <td>40.580192</td>\n",
              "      <td>19.004747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>999</th>\n",
              "      <td>20.147810</td>\n",
              "      <td>8.920115</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1000 rows × 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c421a679-8bb6-49cb-a1b1-1a1d6331d783')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-4e8799a8-932a-4ea2-ba8f-aa823cf9ac26\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e8799a8-932a-4ea2-ba8f-aa823cf9ac26')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-4e8799a8-932a-4ea2-ba8f-aa823cf9ac26 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c421a679-8bb6-49cb-a1b1-1a1d6331d783 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c421a679-8bb6-49cb-a1b1-1a1d6331d783');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Gain insights of dataset\n",
        "sns.scatterplot(x='mass_npea',y='tumor_size', data=data)"
      ],
      "metadata": {
        "id": "P9ipnJ_iKF42",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 466
        },
        "outputId": "6d67259c-cbe0-4ddb-c5e4-673315cca5a0"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: xlabel='mass_npea', ylabel='tumor_size'>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Plot a graph to check linearity\n",
        "data.describe()"
      ],
      "metadata": {
        "id": "ItVOltUuLE-T",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "3a8bd5fc-3a19-476f-a9c6-fbc747508525"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         mass_npea   tumor_size\n",
              "count  1000.000000  1000.000000\n",
              "mean     22.709158     9.805131\n",
              "std      11.682122     5.842747\n",
              "min       1.575483     0.092640\n",
              "25%      12.290811     4.719465\n",
              "50%      22.968280     9.936148\n",
              "75%      32.664439    14.886392\n",
              "max      44.255681    19.994353"
            ],
            "text/html": [
              "\n",
              "\n",
              "  <div id=\"df-34ccf5c6-097e-4257-a09b-af1aaa6d9118\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mass_npea</th>\n",
              "      <th>tumor_size</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>22.709158</td>\n",
              "      <td>9.805131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>11.682122</td>\n",
              "      <td>5.842747</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.575483</td>\n",
              "      <td>0.092640</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>12.290811</td>\n",
              "      <td>4.719465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>22.968280</td>\n",
              "      <td>9.936148</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>32.664439</td>\n",
              "      <td>14.886392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>44.255681</td>\n",
              "      <td>19.994353</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-34ccf5c6-097e-4257-a09b-af1aaa6d9118')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "\n",
              "\n",
              "\n",
              "    <div id=\"df-9b174431-ec1e-4878-83f8-287680a35855\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9b174431-ec1e-4878-83f8-287680a35855')\"\n",
              "              title=\"Suggest charts.\"\n",
              "              style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "    </div>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "    background-color: #E8F0FE;\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: #1967D2;\n",
              "    height: 32px;\n",
              "    padding: 0 0 0 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: #E2EBFA;\n",
              "    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: #174EA6;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "    background-color: #3B4455;\n",
              "    fill: #D2E3FC;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart:hover {\n",
              "    background-color: #434B5C;\n",
              "    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "    fill: #FFFFFF;\n",
              "  }\n",
              "</style>\n",
              "\n",
              "    <script>\n",
              "      async function quickchart(key) {\n",
              "        const containerElement = document.querySelector('#' + key);\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      }\n",
              "    </script>\n",
              "\n",
              "      <script>\n",
              "\n",
              "function displayQuickchartButton(domScope) {\n",
              "  let quickchartButtonEl =\n",
              "    domScope.querySelector('#df-9b174431-ec1e-4878-83f8-287680a35855 button.colab-df-quickchart');\n",
              "  quickchartButtonEl.style.display =\n",
              "    google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "}\n",
              "\n",
              "        displayQuickchartButton(document);\n",
              "      </script>\n",
              "      <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-34ccf5c6-097e-4257-a09b-af1aaa6d9118 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-34ccf5c6-097e-4257-a09b-af1aaa6d9118');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Extract X and Y from data\n",
        "X=data[['mass_npea']]\n",
        "Y=data['tumor_size']\n"
      ],
      "metadata": {
        "id": "mQ5YOGJFLE63"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Train a Linear Regression Model\n",
        "model= LinearRegression()\n",
        "model.fit(X, Y)\n"
      ],
      "metadata": {
        "id": "M1Jpn6TCLE4s",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 74
        },
        "outputId": "c9341e0b-9831-488c-e43e-47039452225f"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LinearRegression</label><div class=\"sk-toggleable__content\"><pre>LinearRegression()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Evaluate the Model\n",
        "y_pred=model.predict(X)\n",
        "mse=mean_squared_error(Y,y_pred)\n",
        "mse\n",
        "\n"
      ],
      "metadata": {
        "id": "E4sxQ9G4LE2v",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "28b6046d-1c36-42db-f736-fe586b8b626d"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.24388273258319765"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the data and regression line\n",
        "plt.scatter(X,Y, label='Data')\n",
        "plt.plot(X,y_pred, color='green')\n",
        "plt.xlabel('Mass Npea')\n",
        "plt.ylabel('Tumor Size')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "F5p0Zr1_LSIP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 449
        },
        "outputId": "8551e2eb-20f5-4f22-ee29-4e3ba75e71d2"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}